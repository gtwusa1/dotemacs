
* First Things First
** Load some /private/ settings

If they exist...

#+BEGIN_SRC emacs-lisp
  (let ((my/private-file "~/.emacs.d/private.org"))
    (if (file-exists-p my/private-file)
        (org-babel-load-file my/private-file)))
#+END_SRC


* Themes

Make text selection more obvious.

#+BEGIN_SRC emacs-lisp
  (set-face-attribute 'region nil
                      :background "white smoke"
                      :foreground "black"
                      :weight 'bold)
#+END_SRC

* Packages

Auto-install packages if not already present on the system.

#+BEGIN_SRC emacs-lisp
  (setq use-package-always-ensure t)
#+END_SRC

** column-enforce-mode

Highlight text that extends beyond a certain (100) column.

#+BEGIN_SRC emacs-lisp
  (use-package column-enforce-mode
    :init
    (progn
      (add-hook 'prog-mode-hook 'column-enforce-mode)
      (setq column-enforce-column 100)))
#+END_SRC

** company

Modular text completion framework

#+BEGIN_SRC emacs-lisp
  (use-package company
    :init
    (add-hook 'after-init-hook 'global-company-mode))
#+END_SRC

** expand-region

Increase selected region by semantic units.

#+BEGIN_SRC emacs-lisp
  (use-package expand-region
    :init
    (global-set-key (kbd "C-=") 'er/expand-region))
#+END_SRC

** ido-mode
*** ido-vertical-mode
#+BEGIN_SRC emacs-lisp
  (use-package ido-vertical-mode
    :init
    (progn
      (ido-mode 1)
      (ido-vertical-mode 1)
      (setq ido-vertical-define-keys 'C-n-and-C-p-only)))
#+END_SRC

*** flx-ido

#+BEGIN_SRC emacs-lisp
  (use-package flx-ido
    :init
    (progn
      (ido-everywhere 1)
      (flx-ido-mode 1)
      ;; disable ido faces to see flx highlights.
      (setq ido-enable-flex-matching t)
      (setq ido-use-faces nil)))
#+END_SRC

** magit

A Git porcelain inside Emacs.

#+BEGIN_SRC emacs-lisp
  (use-package magit
    :bind ("C-c G" . magit-status))

  ;; full screen magit-status

  (defadvice magit-status (around magit-fullscreen activate)
    (window-configuration-to-register :magit-fullscreen)
    ad-do-it
    (delete-other-windows))

  (defun magit-quit-session ()
    "Restores the previous window configuration and kills the magit buffer"
    (interactive)
    (kill-buffer)
    (jump-to-register :magit-fullscreen))

  ;(define-key magit-status-mode-map (kbd "q") 'magit-quit-session)
#+END_SRC

** simpleclip

Simplified access to the system clipboard in Emacs.

#+BEGIN_SRC emacs-lisp
  (use-package simpleclip
    :init
    (simpleclip-mode 1))
#+END_SRC

** smex

M-x interface with Ido-style fuzzy matching.

#+BEGIN_SRC emacs-lisp
  (use-package smex
    :init
    (progn
      (smex-initialize)
      (global-set-key (kbd "M-x") 'smex)
      (global-set-key (kbd "M-X") 'smex-major-mode-commands)
      ;; This is your old M-x.
      (global-set-key (kbd "C-c C-c M-x") 'execute-extended-command)))

#+END_SRC

** web-mode 

#+BEGIN_SRC emacs-lisp
  (use-package web-mode
    :init
    (progn
      (require 'web-mode)
      (add-to-list 'auto-mode-alist '("\\.phtml\\'" . web-mode))
      (add-to-list 'auto-mode-alist '("\\.tpl\\.php\\'" . web-mode))
      (add-to-list 'auto-mode-alist '("\\.[agj]sp\\'" . web-mode))
      (add-to-list 'auto-mode-alist '("\\.as[cp]x\\'" . web-mode))
      (add-to-list 'auto-mode-alist '("\\.erb\\'" . web-mode))
      (add-to-list 'auto-mode-alist '("\\.mustache\\'" . web-mode))
      (add-to-list 'auto-mode-alist '("\\.djhtml\\'" . web-mode))
      (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))))
#+END_SRC
